pdb:

- Convert hooks into event emitter services.
- Document events.
- Caching strategy.
- Capture component configuration field definitions (yaml'ed form API?).
- Make add js and add css in yaml files work automatically.
  - This is part of a bigger question about where and how roll-ups of assets should happen though.
  - Smart bundling handled by Drupal? JSPM? How does it affect our lazyloading model in ng2?
- Where do we source our library files? Can't live in the module I assume.
- Determine compatibility strategy:
  - By default let as many frameworks as are enabled all be mixed.
  - Have some kind of hook to allow framework modules to declare incompatibility
  - Never allow mixing of incompatible frameworks.
- You cannot safely place the same component on the page multiple times:
  - Add an instance id generator function on the Drupal side.
  - Feed that out to drupalSettings for use wherever we need it client side.
  - This is solved in our D7 implementation, just needs to be ported.
- GraphQL integration --> I don't want this to be mandatory, but an optional integration point would be amazing. New
  submodule for this probably.
- ESI integration --> Again, not mandatory, so probably a new submodule.

pdb_ng2:

- Convert hook implementations into event subscribers.
- Twig integration --> Bug Tobias Bosch about twig outputting ng2 templates work that already exists and figure out how
  that could be integrated into our components optionally.

pdb_react:

- Needs a lot of work, I don't know react yet.
